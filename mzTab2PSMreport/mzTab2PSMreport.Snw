\documentclass[a4paper]{article}

\usepackage{subfig, fullpage, graphicx, amsmath}
\usepackage{url}

%\setlength{\voffset}{0pt}
%\setlength{\topmargin}{0pt}
%\setlength{\headheight}{0pt}
%\setlength{\headsep}{0pt}
\setlength{\textwidth}{16cm}


\SweaveOpts{prefix.string=plots/}
\pagestyle{empty}

\begin{document}

<<echo=false,results=hide>>=

# options
options(digits=10)
breaks = 80

input.file <- 'analysis.mzTab'

# count the occurences of character c in string s
countOccurrences <- function(c,s) {
s2 <- gsub(c,"",s)
return (nchar(s) - nchar(s2))
}

# check that all protein accessions are of the format *|*|*
checkAccessionFormat <- function(accessions) {
n <- length(accessions)
count <- countOccurrences("[|]",accessions)
m <- length(which(count==2))
return (n==m)
}

# collapse rows
# (In mzTab, PSMs with multiple protein accessions are reported in multiple rows. This function collapses them to a single row.)
collapseRows <- function(psm.data) {

# generate index vector idx
tmp.psm.id <- 0
idx <- c()
accessions.tmp <- c()
accessions.strings <- c()
for (i in 1:length(psm.data$PSM_ID)) {

if (psm.data$PSM_ID[i] == tmp.psm.id) {
if (length(accessions.tmp) > 0) {
accessions.strings <- c(accessions.strings, toString(accessions.tmp, sep=','))
accessions.tmp <- c()
}

idx <- c(idx,i)
tmp.psm.id <- tmp.psm.id + 1
}

accessions.tmp <- c(accessions.tmp, psm.data$accession[i])
}
accessions.strings <- c(accessions.strings, toString(accessions.tmp, sep=','))

psm.data <- psm.data[idx,]
psm.data$accession <- accessions.strings

return (psm.data)
}

# read the PSM section of an mzTab file
readMzTabPSM <- function(file) {

# read entire mzTab
no.col <- max(count.fields(file, sep = "\t", quote=""))
data <- read.table(file, sep="\t", fill=TRUE, quote="", col.names=1:no.col)

# extract PSM data
psm.data <- data[which(data[,1]=="PSM"),]
colnames(psm.data) <- unlist(data[which(data[,1]=="PSH")[1],])
psm.data$PSH <- NULL

# simplify accession (in case it is of the format *|*|* )
psm.data$accession <- as.character(psm.data$accession)
if (checkAccessionFormat(psm.data$accession)) {
list <- strsplit(psm.data$accession, "[|]")
psm.data$accession <- unlist(lapply(list, '[[', 2))
psm.data$gene <- unlist(lapply(list, '[[', 3))
}

psm.data <- collapseRows(psm.data)

return (psm.data)
}

# check whether the column search_engine_score[n] exists
checkSearchEngineScoreExists <- function(table, n) {
column <- paste("search_engine_score[", as.character(n), "]", sep="")
return (column %in% colnames(table))
}

# check whether the column opt_global_SpecEValue_score exists
checkEValueExists <- function(table) {
column <- "opt_global_SpecEValue_score"
return (column %in% colnames(table))
}

# plot score distribution
plotScoreDistribution <- function(scores, pdf.file, breaks)
{
if (is.factor(scores))
{
scores <- as.numeric(as.character(scores))
}

pdf(file=pdf.file, height=4)
hist(log10(scores), xlab=expression('log'[10]*' score'), ylab="frequency", freq=TRUE, main="", col="grey", breaks=breaks)
dev.off()
}



psm.data <- readMzTabPSM(input.file)

n.total <- dim(psm.data)[1]
n.unique <- length(which(psm.data$unique==1))
n.nonredundant <- length(unique(psm.data$sequence))
n.unique.nonredundant <- length(unique(psm.data[which(psm.data$unique==1),]$sequence))

n.target <- length(which(psm.data$opt_global_target_decoy=="target"))
n.decoy <- length(which(psm.data$opt_global_target_decoy=="decoy"))
n.target.decoy <- length(which(psm.data$opt_global_target_decoy=="target+decoy"))
n.neither <- length(which(psm.data$opt_global_target_decoy=="null"))
n.target.nonredundant <- length(unique(psm.data[which(psm.data$opt_global_target_decoy=="target"),]$sequence))
n.decoy.nonredundant <- length(unique(psm.data[which(psm.data$opt_global_target_decoy=="decoy"),]$sequence))
n.target.decoy.nonredundant <- length(unique(psm.data[which(psm.data$opt_global_target_decoy=="target+decoy"),]$sequence))
n.neither.nonredundant <- length(unique(psm.data[which(psm.data$opt_global_target_decoy=="null"),]$sequence))

if (checkSearchEngineScoreExists(psm.data, 1))
{
scores <- psm.data$`search_engine_score[1]`

if (length(scores) > 0)
{
plotScoreDistribution(scores, "plot__search_engine_score.pdf", breaks)
}

scores <- psm.data[which(psm.data$opt_global_target_decoy=="target"),]$`search_engine_score[1]`

if (length(scores) > 0)
{
plotScoreDistribution(scores, "plot__search_engine_score__target.pdf", breaks)
}

scores <- psm.data[which(psm.data$opt_global_target_decoy=="decoy"),]$`search_engine_score[1]`

if (length(scores) > 0)
{
plotScoreDistribution(scores, "plot__search_engine_score__decoy.pdf", breaks)
}
}

if (checkEValueExists(psm.data))
{
scores <- psm.data$`opt_global_SpecEValue_score`

if (length(scores) > 0)
{
plotScoreDistribution(scores, "plot__e_value_score.pdf", breaks)
}

scores <- psm.data[which(psm.data$opt_global_target_decoy=="target"),]$`opt_global_SpecEValue_score`

if (length(scores) > 0)
{
plotScoreDistribution(scores, "plot__e_value_score__target.pdf", breaks)
}

scores <- psm.data[which(psm.data$opt_global_target_decoy=="decoy"),]$`opt_global_SpecEValue_score`

if (length(scores) > 0)
{
plotScoreDistribution(scores, "plot__e_value_score__decoy.pdf", breaks)
}
}

@


\begin{center}
\section*{Report for {\tt PSM} Section in {\tt mzTab} File\\ \url{FILE_NAME_DUMMY}}
\end{center}

\vspace{1.0cm}

\begin{table}[hb]
\begin{center}
\begin{tabular}{| r | r | r |}
\hline
 & total & non-redundant\\
\hline
PSMs & \Sexpr{format(n.total, big.mark=",")} & \Sexpr{format(n.nonredundant, big.mark=",")}\\
unique PSMs & \Sexpr{format(n.unique, big.mark=",")} & \Sexpr{format(n.unique.nonredundant, big.mark=",")}\\
\hline
target PSMs & \Sexpr{format(n.target, big.mark=",")} & \Sexpr{format(n.target.nonredundant, big.mark=",")}\\
decoy PSMs & \Sexpr{format(n.decoy, big.mark=",")} & \Sexpr{format(n.decoy.nonredundant, big.mark=",")}\\
target + decoy PSMs & \Sexpr{format(n.target.decoy, big.mark=",")} & \Sexpr{format(n.target.decoy.nonredundant, big.mark=",")}\\
unmapped PSMs & \Sexpr{format(n.neither, big.mark=",")} & \Sexpr{format(n.neither.nonredundant, big.mark=",")}\\
\hline
\end{tabular}
\caption{Number of PSMs. Two PSMs are considered {\em non-redundant} if they differ in amino acid sequence. They are considered {\em redundant}, if they differ merely in modifications. A PSM is considered {\em unique}, if its amino acid sequence can be mapped uniquely to a single protein. The sequence can appear in either target proteins, decoy proteins, both or neither of them.}
\end{center}
\end{table}

\newcommand{\FigureWidthA}{12.0cm}
\newcommand{\FigureSpacingV}{-0.5cm}

\IfFileExists{plot__search_engine_score.pdf}
{
  \begin{figure}[hb]
    \centering
    \subfloat[\Sexpr{format(n.total, big.mark=",")} PSMs]{\includegraphics[width=\FigureWidthA]{plot__search_engine_score.pdf}}\\
    \IfFileExists{plot__search_engine_score__target.pdf}
    {
      \centering
      \subfloat[\Sexpr{format(n.target, big.mark=",")} target PSMs]{\includegraphics[width=\FigureWidthA]{plot__search_engine_score__target.pdf}}\\
    }
    {}
    \IfFileExists{plot__search_engine_score__decoy.pdf}
    {
      \centering
      \subfloat[\Sexpr{format(n.decoy, big.mark=",")} decoy PSMs]{\includegraphics[width=\FigureWidthA]{plot__search_engine_score__decoy.pdf}}\\
    }
    {}
    \caption{Score distribution of {\tt search\_engine\_score[1]}.}
  \end{figure}
}
{}

\IfFileExists{plot__e_value_score.pdf}
{
  \begin{figure}[hb]
    \centering
    \subfloat[\Sexpr{format(n.total, big.mark=",")} PSMs]{\includegraphics[width=\FigureWidthA]{plot__e_value_score.pdf}}\\
    \IfFileExists{plot__e_value_score__target.pdf}
    {
      \centering
      \subfloat[\Sexpr{format(n.target, big.mark=",")} target PSMs]{\includegraphics[width=\FigureWidthA]{plot__e_value_score__target.pdf}}\\
    }
    {}
    \IfFileExists{plot__e_value_score__decoy.pdf}
    {
      \centering
      \subfloat[\Sexpr{format(n.decoy, big.mark=",")} decoy PSMs]{\includegraphics[width=\FigureWidthA]{plot__e_value_score__decoy.pdf}}\\
    }
    {}
    \caption{Score distribution of e-values.}
  \end{figure}
}
{}

\end{document}
